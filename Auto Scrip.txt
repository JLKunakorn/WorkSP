// ==UserScript==
// @name         Speexx Auto Script
// @namespace    http://tampermonkey.net/
// @version      1.6
// @description  Run auto script for Speexx exercises
// @author       คุณ
// @match        https://portal.speexx.com/articles/*
// @grant        none
// ==/UserScript==

let duplicateLoadCount = 0;
const maxDuplicateLoads = 10;
let isSTScriptRunning = false;  // ตัวแปรเพื่อเช็คว่า ST.js กำลังรันหรือไม่
let isNextScriptRunning = false;  // ตัวแปรเพื่อเช็คว่า Next.js กำลังรันหรือไม่

async function loadAndRunScript(url, key) {
    if (!window[key] && !isSTScriptRunning && !isNextScriptRunning) {  // ตรวจสอบว่าไม่มีการรันสคริปต์อื่นอยู่
        try {
            let response = await fetch(url);
            let scriptText = await response.text();
            let scriptElement = document.createElement("script");
            scriptElement.textContent = scriptText;
            document.body.appendChild(scriptElement);
            window[key] = true;
            console.log(`✅ รันโค้ดจาก ${url} สำเร็จ!`);
            duplicateLoadCount = 0;

            // เช็คว่าเป็น ST.js หรือ Next.js และกำหนดสถานะการรัน
            if (url.includes("ST.js")) {
                isSTScriptRunning = true; // กำหนดสถานะการรัน ST.js
            } else if (url.includes("Next.js")) {
                isNextScriptRunning = true; // กำหนดสถานะการรัน Next.js
            }
        } catch (error) {
            console.error(`❌ โหลดโค้ดจาก ${url} ล้มเหลว:`, error);
            duplicateLoadCount++;
            if (duplicateLoadCount >= maxDuplicateLoads) {
                console.warn("🔄 โหลดซ้ำเกินขีดจำกัด รีเฟรชหน้าเว็บ...");
                location.reload();
            }
        }
    } else {
        duplicateLoadCount++;
        console.log(`🔁 โค้ดจาก ${url} ถูกโหลดไปแล้ว ไม่โหลดซ้ำ (${duplicateLoadCount}/${maxDuplicateLoads})`);
        if (duplicateLoadCount >= maxDuplicateLoads) {
            console.warn("🔄 โหลดซ้ำเกินขีดจำกัด รีเฟรชหน้าเว็บ...");
            location.reload();
        }
    }
}

// ฟังก์ชันที่จะรีเซ็ตสถานะการรันสคริปต์หลังจากเสร็จสิ้น
function resetScriptStatus(url) {
    if (url.includes("ST.js")) {
        isSTScriptRunning = false;
    } else if (url.includes("Next.js")) {
        isNextScriptRunning = false;
    }
}

async function waitForCondition(checkFn, timeout = 1000, interval = 200) {
    const startTime = Date.now();
    return new Promise((resolve) => {
        const checkInterval = setInterval(() => {
            if (checkFn()) {
                clearInterval(checkInterval);
                resolve(true);
            } else if (Date.now() - startTime > timeout) {
                clearInterval(checkInterval);
                resolve(false);
            }
        }, interval);
    });
}

async function waitAndRunStartIfNeeded() {
    console.log("⏳ รอ 2 วินาทีก่อนเริ่ม...");
    await new Promise(resolve => setTimeout(resolve, 800));

    console.log("🔍 กำลังตรวจสอบเงื่อนไขเริ่มต้น...");

    const debugElements = {
        startButton: document.querySelector('.practice-box-foot .call-to-action:not(.ml-auto)'),
        boxTitle: document.querySelector('.box-title'),
        continueDesktop: document.querySelector('a.coach-call-to-action[aria-label="Continue"] button'),
        continueMobile: document.querySelector('.coach-call-to-action-mobile'),
        startExerciseButton: document.querySelector('button.btn.btn-primary.start-exercise')
    };
    console.log('Elements found:', debugElements);

    const conditionMet = await waitForCondition(() => {
        const startButton = document.querySelector('.practice-box-foot .call-to-action:not(.ml-auto)');
        const boxTitle = document.querySelector('.box-title');
        const continueDesktop = document.querySelector('a.coach-call-to-action[aria-label="Continue"] button');
        const continueMobile = document.querySelector('.coach-call-to-action-mobile');
        const startExerciseButton = document.querySelector('button.btn.btn-primary.start-exercise');  // ตรวจสอบ Start

        const hasStartNow = startButton && startButton.textContent.trim() === 'Start now';
        const hasContinueDesktop = continueDesktop && continueDesktop.textContent.trim() === 'Continue';
        const hasContinueMobile = continueMobile && continueMobile.getAttribute('aria-label') === 'Continue';
        const hasBoxTitle = boxTitle;
        const hasStartExercise = startExerciseButton !== null;

        return (
            hasBoxTitle &&
            (hasStartNow || hasContinueDesktop || hasContinueMobile || hasStartExercise)
        );
    }, 500);

    if (conditionMet) {
        console.log("🚀 เงื่อนไขครบ → รัน Start.js...");
        await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Start.js", "isStartLoaded");
        await new Promise(resolve => setTimeout(resolve, 100));
    } else {
        console.log("⚠️ ไม่พบเงื่อนไขเริ่มต้นภายใน 5 วินาที → ข้ามการรัน Start.js");
    }
}

async function main() {
    await waitAndRunStartIfNeeded();

    console.log("🔎 เริ่มต้นตรวจสอบประเภทของแบบฝึกหัด...");

    while (true) {
        // ตรวจสอบปุ่ม Continue learning ก่อน
        let continueButton = document.querySelector('.btn.btn-primary.next[tabindex="0"]');
        if (continueButton && continueButton.innerText.includes("Continue learning")) {
            console.log("🎉 พบปุ่ม 'Continue learning' → กดและรีเฟรช!");
            continueButton.click();
            await new Promise(resolve => setTimeout(resolve, 2000));
            location.reload();
            return;
        }

        const exerciseItems = document.querySelector(".exercise-items");
        if (!exerciseItems) {
            console.log("❗ ไม่พบปุ่ม Next → โหลด Next.js...");
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Next.js", "isNextLoaded");
            await new Promise(resolve => setTimeout(resolve, 900));
            continue;
        }

        // ตรวจสอบประเภทแบบฝึกหัด
        if (exerciseItems.querySelector('.drag-drop-placeholder.ui-droppable')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Drag.js", "isDragLoaded");
        } else if (exerciseItems.querySelector('input[type="radio"]')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Single.js", "isSingleLoaded");
        } else if (exerciseItems.querySelector('.gap-container.form-inline.form-group-sm')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Refresh.js", "isRefreshLoaded");
        } else if (exerciseItems.querySelector('.scrambled-cell-container')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Long.js", "isLongLoaded");
        } else if (exerciseItems.querySelector('.answer-container.form-inline.form-group-sm')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Write.js", "isWriteLoaded");
        } else if (exerciseItems.querySelector('input[type="checkbox"]')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Many.js", "isManyLoaded");
        } else if (exerciseItems.querySelector('.mark-text')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Mark.js", "isMarkLoaded");
        } else if (exerciseItems.querySelector('.scrambled-sentence.ui-sortable')) {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Arrange.js", "isArrangeLoaded");
        } else if (document.querySelector('button.btn.btn-primary.start-exercise') && !isSTScriptRunning) {
            // ถ้ามีปุ่ม Start และยังไม่รัน ST.js
            console.log("🚀 พบปุ่ม Start → รัน ST.js...");
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/ST.js", "isSTLoaded");
            isSTScriptRunning = true; // ตั้งค่าให้สคริปต์ ST.js รันแค่ครั้งเดียว
        } else {
            await loadAndRunScript("https://raw.githubusercontent.com/JLKunakorn/SpeexBP/main/Next.js", "isNextLoaded");
        }

        await new Promise(resolve => setTimeout(resolve, 800));
    }
}

// เพิ่มการตรวจสอบเมื่อหน้าเว็บโหลดเสร็จสมบูรณ์
if (document.readyState === "complete" || document.readyState === "interactive") {
    setTimeout(main, 2000);
} else {
    document.addEventListener("DOMContentLoaded", function() {
        setTimeout(main, 1000);
    });
}
